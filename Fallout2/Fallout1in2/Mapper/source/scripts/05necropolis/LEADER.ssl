/*

   Necropolis - Leader

*/

/* Include Files */
#include "define.h"
//#include "area/necropolis.h"

#define NAME                    SCRIPT_LEADER
#define TOWN_REP_VAR            (GVAR_TOWN_REP_NECROPOLIS)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure destroy_p_proc;
procedure talk_p_proc;
procedure combat_p_proc;
procedure combat_rads_inc;

procedure leader00;
procedure leader02;
procedure leader03;
procedure leader03a;
procedure leader04;
procedure leader04a;
procedure leader04b;
procedure leader05;
procedure leader05a;
procedure leader06;
procedure leader06a;
procedure leader06b;
procedure leader07;
procedure leader08;
procedure leader09;
procedure leader10;
procedure leader10a;
procedure leader11;
procedure leader12;
procedure leader13;
procedure leader14;
procedure leader15;
procedure leader15a;
procedure leader15b;
procedure leader16;
procedure leader17;
procedure leader18;
procedure leader19;
procedure leader19a;
procedure leader19b;
procedure leader20;
procedure leader21;
procedure leader22;
procedure leader23;
procedure leader24;
procedure leader25;
procedure leader26;
procedure leader27;
procedure leader28;
procedure leader29;
procedure leader30;
procedure leader31;
procedure leadercbt;
procedure leaderend;

variable tmp_hostile;
variable init_teams := 0;
variable has_parts;
variable repair_skill;
variable stuff;

procedure start begin
   if (not(init_teams)) then begin
      set_self_team(TEAM_NECROPOLIS_UNDERGROUND);
      set_self_ai(AI_GHOUL_NORMAL);
      init_teams := 1;
   end
end

procedure pickup_p_proc begin
   tmp_hostile := 1;
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(300));
end

procedure destroy_p_proc begin
   inc_inv_good_crit
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else begin
      if (self_can_see_dude) then begin
         if (local_var(7) == 0) then begin
            set_local_var(7, 1);
            if (dude_is_armed) then begin
               float_msg(self_obj, mstr(193), FLOAT_MSG_YELLOW);
            end
            else begin
               float_msg(self_obj, mstr(194), FLOAT_MSG_YELLOW);
            end
         end
      end
   end
end

procedure talk_p_proc begin
   set_tma_data(NAME, 1000, -1, -1, TMA_MSG_DONTKNOW_START, TMA_MSG_DONTKNOW_END);

   dude_look_at_self;
   get_reaction
   has_parts := dude_item(PID_PUMP_PARTS);
   start_gdialog(81, self_obj, 4, -1, -1);
   gsay_start;
   if (local_var(4)) then begin
      if bad_critter_reaction then begin
         call leader30;
      end
      else if (necropolis_wpump_fixed) then begin
         call leader26;
      end
      else if (local_var(6) == 1) then begin
         call leader20;
      end
      else if (global_var(GVAR_NECROP_WATER_CHIP_TAKEN) == 1) then begin
         call leader29;
      end
      else if (local_var(5) == 1) then begin
         if (has_parts) then begin
            call leader18;
         end
         else begin
            call leader16;
         end
      end
      else begin
         call leader00;
      end
   end
   else begin
      set_local_var(4, 1);
      call leader00;
   end
   gsay_end;
   end_dialogue;
end

procedure leadercbt
begin
   BigDownReact
   tmp_hostile := 1;
end

procedure leaderend
begin
end

procedure leader00
begin
   Reply(101);
   NOption(102, leader04, 4);
   NOption(103, leader03, 4);
   NLowOption(104, leader02);
end

procedure leader02
begin
   Reply(105);
   NLowOption(106, leaderend);
end

procedure leader03
begin
   Reply(107);
   NOption(108, leader04, 4);
   BOption(109, leader03a, 4);
   NOption(110, leaderend, 4);
end

procedure leader03a
begin
   DownReact
   call leader30;
end

procedure leader04
begin
   Reply(111);
   if (global_var(GVAR_SET_DEAD) != 1) then begin
      NOption(112, leader05, 4);
   end
   else begin
      NOption(113, leader23, 4);
   end
   NOption(114, leader04a, 5);
   BOption(115, leader04b, 5);
end

procedure leader04a
begin
   if (global_var(GVAR_SET_DEAD) != 1) then begin
      call leader06;
   end
   else begin
      call leader07;
   end
end

procedure leader04b
begin
   DownReact
   call leader05;
end

procedure leader05
begin
   Reply(116);
   BOption(117, leader05a, 4);
   NOption(118, leader06, 4);
end

procedure leader05a
begin
   DownReact
   call leader06;
end

procedure leader06
begin
   Reply(119);
   NOption(120, leader07, 4);
   BOption(121, leader06a, 4);
   NOption(122, leader08, 4);
   BOption(123, leader06b, 4);
end

procedure leader06a
begin
   DownReact
   call leader08;
end

procedure leader06b
begin
   DownReact
   call leader07;
end

procedure leader07
begin
   Reply(124);
   NOption(125, leader25, 6);
   NOption(126, leader09, 4);
   NOption(127, leader24, 4);
end

procedure leader08
begin
   Reply(128);
   NOption(129, leaderend, 4);
   NOption(130, leader09, 4);
end

procedure leader09
begin
   Reply(131);
   NOption(129, leader10, 4);
end

procedure leader10
begin
   Reply(132);
   BOption(133, leader10a, 4);
   NOption(134, leader11, 4);
   NOption(135, leader11, 4);
end

procedure leader10a
begin
   DownReact
   call leader13;
end

procedure leader11
begin
   Reply(136);
   NOption(137, leader12, 4);
   NOption(138, leader14, 4);
end

procedure leader12
begin
   NMessage(139);
   call leadercbt;
end

procedure leader13
begin
   Reply(140);
   NOption(141, leader11, 4);
   BOption(142, leadercbt, 4);
end

procedure leader14
begin
   Reply(143);
   NOption(144, leader15, 4);
   if (has_parts) then begin
      NOption(145, leader21, 4);
   end
end

procedure leader15
begin
   Reply(146);
   NOption(147, leader12, 4);
   NOption(148, leader15b, 4);
   BOption(149, leader15a, 4);
end

procedure leader15a
begin
   DownReact
   call leader15b;
end

procedure leader15b
begin
   if not(necropolis_wpump_fixed) then begin
      set_global_var(GVAR_NECROP_WATER_PUMP_FIXED, 1);
   end
   set_local_var(5, 1);
   Reply(150);
   NOption(151, leaderend, 4);
end

procedure leader16
begin
   Reply(152);
   NOption(153, leader17, 4);
   NOption(154, leader12, 4);
   NOption(155, leader22, 4);
end

procedure leader17
begin
   NMessage(156);
end

procedure leader18
begin
   Reply(157);
   NOption(158, leader19, 4);
   NOption(159, leader12, 4);
end

procedure leader19
begin
   set_local_var(6, 1);
   repair_skill := has_skill(dude_obj, SKILL_REPAIR);
   if (repair_skill < 60) then begin
      call leader19a;
   end
   else begin
      call leader19b;
   end
end

procedure leader19a
begin
   stuff := create_object(PID_DEANS_ELECTRONICS, 0, 0);
   add_obj_to_inven(dude_obj, stuff);
   stuff := create_object(PID_DEANS_ELECTRONICS, 0, 0);
   add_obj_to_inven(dude_obj, stuff);
   stuff := create_object(PID_DEANS_ELECTRONICS, 0, 0);
   add_obj_to_inven(dude_obj, stuff);
   NMessage(160);
end

procedure leader19b
begin
   NMessage(161);
end

procedure leader20
begin
   Reply(162);
   NOption(163, leader17, 4);
   NOption(164, leader12, 4);
end

procedure leader21
begin
   Reply(165);
   NOption(166, leader19, 4);
   NOption(167, leader12, 4);
end

procedure leader22
begin
   Reply(168);
   NOption(169, leaderend, 4);
end

procedure leader23
begin
   Reply(170);
   NOption(171, leader07, 4);
end

procedure leader24
begin
   Reply(172);
   NOption(173, leader09, 4);
   NOption(129, leader10, 4);
end

procedure leader25
begin
   Reply(174);
   NOption(175, leader09, 4);
   NOption(176, leader24, 4);
end

procedure leader26
begin
   Reply(177);
   NOption(178, leaderend, 4);
end

procedure leader27
begin
   Reply(179);
   NOption(180, leader28, 4);
end

procedure leader28
begin
   Reply(181);
   NOption(129, leaderend, 4);
end

procedure leader29
begin
   Reply(182);
   if (local_var(5) == 1) then begin
      NOption(183, leader22, 4);
   end
   NOption(184, leader12, 4);
   NOption(185, leader31, 4);
end

procedure leader30
begin
   NMessage(186);
end

procedure leader31
begin
   Reply(187);
   NOption(189, leader15, 4);
   if (has_parts) then begin
      NOption(145, leader21, 4);
   end
end

procedure combat_p_proc begin
end

/*

   Adds Fallout 1 water chip note to the pipboy screen.
   Also other shit related to the counter

*/

/* Include Files */
#include "define.h"
#include "command.h"
#include "sfall/sfall.h"

/* Standard Script Procedures */
procedure start;

procedure GameModeChange_handler;
procedure RestTimer_handler;

procedure check_watertimer;
procedure check_invasions;

procedure KeyPressHandler;
procedure show_note;
procedure show_days(variable gameTime);
procedure delete_all;

#define PIP_FRM            (0x0600007F) // "PIP.frm" in intrface.lst
#define PIP2_FRM           (0x06000080) // "PIP2.frm" in intrface.lst
#define NotePosX           (32)
#define NotePosY           (83)

#define timer_active       (not(waterchip_returned) and (global_var(GVAR_VAULT13_WATER_DAYS) > 0))

variable opennote, lastFrame;

procedure start begin
   if (game_loaded) then begin
      set_global_script_type(1);
      register_hook_proc(HOOK_GAMEMODECHANGE, GameModeChange_handler);
      register_hook_proc(HOOK_RESTTIMER, RestTimer_handler);
   end

   if not(combat_is_initialized) then begin
      // Find the Water Chip for V13:
      if timer_active then call check_watertimer;

      // Invasion timers
      if not(cathedral_destroyed) then call check_invasions;
   end
end

procedure GameModeChange_handler begin
   variable mode := get_game_mode;

   // Show the pipboy note if the remaining water timer is > 0 days:
   if (mode bwand PIPBOY) then begin
      if (not(opennote) and timer_active and get_water_days_left > 0) then begin
         call show_note;
      end
      return;
   end
   else begin
      opennote := false;
   end

   if (mode bwand WORLDMAP) then begin
      // Only run the script on repeat of either water timer or invasions are still a thing.
      if (timer_active or not(cathedral_destroyed)) then
         set_global_script_repeat(10);
   end
   else begin
      set_global_script_repeat(0);
      if timer_active then
         call check_watertimer;
      if not(cathedral_destroyed) then
         call check_invasions;
   end
end

procedure RestTimer_handler begin
   //if (get_game_mode bwand PIPBOY) then begin
      if (opennote and timer_active) then begin
         call show_days(get_sfall_arg);
         call check_watertimer;
      end
      else if (opennote) then begin
         call delete_all;
      end
   //end
end

procedure check_watertimer begin
   //debug("water days left: " + get_water_days_left);
   if reached_tl_1 and (global_var(GVAR_PLAY_BOIL_MOVIE) == 0) then begin
      set_global_var(GVAR_PLAY_BOIL_MOVIE, 1);
      play_gmovie(BOIL1_MOVIE);
   end
   else if reached_tl_2 and (global_var(GVAR_PLAY_BOIL_MOVIE) == 1) then begin
      set_global_var(GVAR_PLAY_BOIL_MOVIE, 2);
      play_gmovie(BOIL2_MOVIE);
   end
   else if reached_tl_3 and (global_var(GVAR_PLAY_BOIL_MOVIE) == 2) then begin
      set_global_var(GVAR_PLAY_BOIL_MOVIE, 3);
      play_gmovie(BOIL3_MOVIE);
      signal_end_game;
   end
end

procedure check_invasions begin
   if (get_v13_days_left <= 0) and not(v13_invaded) then begin
      set_global_var(GVAR_VAULT_13_WAS_INVADED, 1);

      play_gmovie(OVERRUN_MOVIE);
      signal_end_game;
      debug("v13 just got invaded!");
   end

   // Only check for invasions when on the worldmap.
   // This way, they only get triggered after the player left the location.
   if (get_game_mode bwand WORLDMAP) then begin
      if (get_hub_days_left <= 0) and not(hub_invaded) then begin
         set_global_var(GVAR_THE_HUB_WAS_INVADED, 1);
         debug("the hub just got invaded!");
      end
      if (get_bos_days_left <= 0) and not(bos_invaded) then begin
         set_global_var(GVAR_BROTHERHOOD_WAS_INVADED, 1);
         mark_map_entrance_state(MAP_BROHD12, 0);
         mark_map_entrance_state(MAP_BROHD34, 0);
         debug("the bos just got invaded!");
      end
      if (get_boneyard_days_left <= 0) and not(boneyard_invaded) then begin
         set_global_var(GVAR_FOLLOWERS_INVADED, 1);
         debug("boneyard just got invaded!");
      end
      if (get_necropolis_days_left <= 0) and not(necropolis_invaded) then begin
         set_global_var(GVAR_NECROPOLIS_WAS_INVADED, 1);
         debug("necropolis just got invaded!");
      end
      if (get_shady_days_left <= 0) and not(shady_invaded) then begin
         set_global_var(GVAR_SHADY_SANDS_WAS_INVADED, 1);
         debug("shady sands just got invaded!");
      end
      if (get_junktown_days_left <= 0) and not(junktown_invaded) then begin
         set_global_var(GVAR_JUNKTOWN_WAS_INVADED, 1);
         debug("junktown just got invaded!");
      end
   end
end

procedure show_note begin
   opennote := true;
   lastFrame := -1;

   interface_art_draw(0x1000000 + WINTYPE_PIPBOY, PIP2_FRM, NotePosX, NotePosY);

   call show_days(0);
end

// Initial "days left" when opening the PipBoy:
procedure show_days(variable gameTime) begin
   // We only have 250 images, so bigger than that can't be shown:
   // YES I KNOW THESE ARE 250 IMAGES, BUT IF YOU WANT IT TO LOOK EXACTLY
   // THE SAME AS IN FALLOUT 1, IT IS A NECESSARY THING TO DO. Sue me.
   // We will rework this shit some day in the future. Promise.
   if (gameTime == 0) then gameTime := game_time;

   variable days_left := get_water_days_left_x(gameTime);
   variable frame := days_left - 1;

   if (days_left > 250) then frame := 250;
   if (frame == lastFrame) then return;

   interface_art_draw_frame(0x1000000 + WINTYPE_PIPBOY, "art\\intrface\\days.frm", NotePosX + 35, NotePosY + 97, frame);
   lastFrame := frame;
end

procedure delete_all begin
   opennote := false;
   // Overwrite the pipboy note with a cropped pipboy window image
   interface_art_draw(WINTYPE_PIPBOY, "art\\intrface\\pip2a.frm", NotePosX, NotePosY);
end

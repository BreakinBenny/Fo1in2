/*

   Cathedral - Generic prisoner
   (Black / redshirt)

*/

/* Include Files */
#include "define.h"
#include "maps/mstrlr12.h"

#define NAME                    SCRIPT_MLPRISON
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_CATHEDRAL)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;

procedure goto01;
procedure goto02;
procedure goto03;
procedure goto04;
procedure goto05;
procedure goto06;
procedure goto07;
procedure goto08;
procedure goto09;
procedure goto10;
procedure goto11;
procedure explode;
procedure escape;
procedure dialog_end;

variable tmp_hostile;
variable Only_Once := 1;
variable target_hex;
variable said;

procedure start begin
   if Only_Once then begin
      Only_Once := 0;
      set_self_team(TEAM_SHADY_SANDS);
      set_self_ai(AI_PEASANT);
   end
end

procedure combat begin
   tmp_hostile := 1;
end

procedure critter_p_proc begin
   if (self_tile < 25000) then begin
      call explode;
   end
   else begin
      if ((map_var(MVAR_FIELDOFF) == 1) or (map_var(MVAR_Pris_Field_Status) == 1)) then begin
         call escape;
      end
      else if (tmp_hostile == 1) then begin
         attack(dude_obj);
      end
   end
end

procedure pickup_p_proc begin
   if source_is_dude then begin
      tmp_hostile := 1;
   end
end

procedure talk_p_proc begin
   set_tma_data(tma_source_generic, TMA_MSG_MBASE, -1, -1, 997, 999);

   dude_look_at_self;
   get_reaction

   if dude_wearing_coc_robe then begin
      if (local_var(5) == 1) then begin
         start_dialog_at_node(goto05);
      end
      else begin
         start_dialog_at_node(goto01);
      end
      set_local_var(5, 1);
   end
   else begin
      if (local_var(4) == 1) then begin
         start_dialog_at_node(goto09);
      end
      else begin
         start_dialog_at_node(goto07);
      end
      set_local_var(4, 1);
   end
end

procedure destroy_p_proc begin
   inc_good_critter
end

procedure look_at_p_proc begin
   script_overrides;
end

procedure goto01 begin
   Reply(108);
   BLowOption(109, goto02);
   BOption(110, goto03, 4);
   BOption(111, goto04, 4);
end

procedure goto02 begin
   BMessage(112);
   call dialog_end;
end

procedure goto03 begin
   BMessage(113);
   call dialog_end;
end

procedure goto04 begin
   BMessage(128);
   call dialog_end;
end

procedure goto05 begin
   Reply(114);
   BLowOption(115, goto02);
   BOption(116, goto06, 4);
   BOption(117, dialog_end, 4);
end

procedure goto06 begin
   BMessage(118);
   call dialog_end;
end

procedure goto07 begin
   Reply(119);
   BLowOption(115, goto02);
   BOption(120, goto08, 4);
end

procedure goto08 begin
   BMessage(122);
   call dialog_end;
end

procedure goto09 begin
   Reply(123);
   BLowOption(115, goto02);
   BOption(124, goto11, 4);
   BOption(125, dialog_end, 4);
end

procedure goto10 begin
   BMessage(126);
   call dialog_end;
end

procedure goto11 begin
   BMessage(127);
   call dialog_end;
end

procedure explode begin
   critter_dmg(self_obj, random(128, 150), DMG_explosion);
end

procedure escape begin
   if (said == 0) then begin
      said := 1;
      float_msg(self_obj, mstr(107), FLOAT_MSG_RED);
   end
   target_hex := 22912;
   self_run_to_tile(target_hex);
end

procedure dialog_end begin
end

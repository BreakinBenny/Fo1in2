/*

   Hub - Jacob, the arms dealer

*/

/* Include Files */
#include "define.h"
#include "maps/huboldtn.h"
#include "sfall/main.h"

#define NAME                    SCRIPT_HUBJAKE
#define TOWN_REP_VAR            (GVAR_TOWN_REP_HUB)

#include "command.h"
#include "upgweap.h"
#include "modreact.h"

/* Standard Script Procedures */

procedure start;
procedure combat;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure damage_p_proc;

procedure Jake01;
procedure Jake02;
procedure Jake03;
procedure Jake04;
procedure Jake05;
procedure Jake06;
procedure Jake07;
procedure Jake08;
procedure Jake09;
procedure Jake10;
procedure Jake11;
procedure Jake12;
procedure Jake13;
procedure Jake14;
procedure Jake15;
procedure Jake16;
procedure JakeEnd;
procedure Barter;
procedure Get_Stuff;
procedure Put_Stuff;

// Weapon Upgrades
procedure NodeUpgrade;
procedure NodeUpgrade_Done;
procedure NodeUpgrade_Pistols;
procedure NodeUpgrade_Rifles;
procedure NodeUpgrade_BigGunsA;
procedure NodeUpgrade_Melee;
procedure NodeUpgrade_Revolver;
procedure NodeUpgrade_DesertEagle;
procedure NodeUpgrade_HRifle;
procedure NodeUpgrade_ARifle;
procedure NodeUpgrade_CombatShotgun;
procedure NodeUpgrade_FNFAL;
procedure NodeUpgrade_Flamer;
procedure NodeUpgrade_CattleProd;
procedure NodeUpgrade_Mauser;

variable tmp_hostile;
variable Only_Once := 1;

variable killed := 0;

import variable Jake_Desk_Ptr;

#define LVAR_Here_Before      (4)
#define LVAR_Hostile          (5)
#define LVAR_Restock_Timer    (6)
#define LVAR_Caps_Amount      (7)
#define LVAR_CheckedSelection (8)
#define LVAR_GeigerCounter    (9)

#define RESTOCK_TIME             (GAME_TIME_IN_DAYS + 0)

#ifndef barter_mod_initial
   #define barter_mod_initial    (30)    // vanilla : -15
#endif

#define caps_amount              floor((2000 + random(0, 1000)) * caps_modifier)

#define upgrade_cost(base)          ((base * (25000/(160 + has_skill(dude_obj, SKILL_BARTER))))/100)
#define MCOST                       upgrade_cost(450)
#define DECOST                      upgrade_cost(1250)
#define HRCOST                      upgrade_cost(1500)
#define ARCOST                      upgrade_cost(1500)
#define CSCOST                      upgrade_cost(4000)
#define FNCOST                      upgrade_cost(5000)
#define CPCOST                      upgrade_cost(1250)
#define MauserCOST                  upgrade_cost(1000)

#define give_money(x)               dude_caps_adjust(-x);  \
                                    self_caps_adjust(x)

procedure start begin
   if Only_Once then begin
      Only_Once := 0;
      set_self_team(TEAM_LA_GUN_RUNNERS);
      set_self_ai(AI_MERCHANT);
   end
end

procedure combat begin
   tmp_hostile := 1;
   set_local_var(LVAR_Hostile, 1);
end

procedure critter_p_proc begin
   if (tmp_hostile) then begin
      tmp_hostile := 0;
      attack(dude_obj);
   end
end

procedure pickup_p_proc begin
   if source_is_dude then begin
      tmp_hostile := 1;
   end
end

procedure talk_p_proc begin
   variable LVar0 := 0;

   set_tma_data_generic(TMA_MSG_HUBOLDTN);

   dude_look_at_self;
   gdialog_set_barter_mod(barter_mod_initial);
   call Get_Stuff;
   get_reaction
   fo1_caps_restock;

   if (local_var(LVAR_Hostile) == 1) then begin
      call combat;
   end
   else begin
      if REP_ENEMY_HUB then begin
         start_dialog_at_node(Jake10);
      end
      else if (local_var(LVAR_Here_Before) == 0) then begin
         set_local_var(LVAR_Here_Before, 1);
         start_dialog_at_node(Jake01);
      end
      else if bad_critter_reaction then begin
         start_dialog_at_node(Jake10);
      end
      else begin
         start_dialog_at_node(Jake09);
      end
   end

   //debug("Days till next caps restock: " + (-1 * (GAME_TIME_IN_DAYS - local_var(LVAR_Restock_Timer)) + 1));
   set_local_var(LVAR_Caps_Amount, self_caps);
   self_caps_adjust(-1 * local_var(LVAR_Caps_Amount));
   call Put_Stuff;
end

procedure destroy_p_proc begin
   inc_good_critter
   move_obj_inven_to_obj(Jake_Desk_Ptr, self_obj);
   set_global_var(GVAR_ENEMY_HUB, 1);
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure damage_p_proc begin
   if source_is_dude then begin
      set_global_var(GVAR_ENEMY_HUB, 1);
   end
end

procedure Jake01 begin
   Reply(101);
   NOption(102, Barter, 4);
   NOption(103, Jake02, 4);
   if looking_for_waterchip then begin
      NOption(104, Jake03, 4);
   end
   NOption(105, Jake04, 4);
   NOption(106, Jake13, 4);
   NLowOption(107, Barter);
   NLowOption(108, Jake13);
end

procedure Jake02 begin
   // Add one Geiger Counter if there is none right now (dialog consistency)
   if (self_item_count(PID_GEIGER_COUNTER) == 0) and (local_var(LVAR_GeigerCounter) == 0) then begin
      set_local_var(LVAR_GeigerCounter, 1);
      give_pid_qty(self_obj, PID_GEIGER_COUNTER, 1)
   end

   Reply(109);
   NOption(110, Barter, 4);
   NOption(111, Jake05, 4);
   NOption(112, Jake06, 4);
   NOption(113, Jake13, 4);
end

procedure Jake03 begin
   Reply(114);
   NOption(115, Barter, 4);
   NOption(116, Jake02, 4);
   NOption(117, Jake04, 4);
end

procedure Jake04 begin
   set_local_var(LVAR_Here_Before, 2);

   NMessage(118);
   Reply(162);
   NOption(119, Barter, 4);
   NOption(120, Jake02, 4);
   if looking_for_waterchip then begin
      NOption(121, Jake03, 4);
   end
   NOption(122, Jake13, 4);
end

procedure Jake05 begin
   Reply(123);
   NOption(124, Barter, 4);
   NOption(125, Jake06, 4);
   NOption(126, Jake13, 4);
end

procedure Jake06 begin
   Reply(127);
   NOption(128, Barter, 4);
   NOption(129, Jake07, 4);
   NOption(130, Jake08, 4);
   BOption(131, Jake14, 4);
end

procedure Jake07 begin
   Reply(132);
   NOption(133, Barter, 4);
   NOption(134, Jake08, 4);
   NOption(135, Jake12, 4);
   NOption(136, Jake04, 4);
   NOption(137, Jake13, 4);
end

procedure Jake08 begin
   Reply(138);
   NOption(139, Barter, 4);
   NOption(140, Jake07, 4);
   BOption(141, Jake14, 4);
   NOption(142, Jake13, 4);
end

procedure Jake09 begin
   if (dude_is_male) then begin
      Reply(163);
   end
   else begin
      Reply(164);
   end
   NLowOption(144, Barter);
   NLowOption(145, Jake13);
   NOption(146, Barter, 4);

   if (local_var(LVAR_Here_Before) < 2) then begin
      if looking_for_waterchip then begin
         NOption(104, Jake03, 4);
      end
      NOption(105, Jake04, 4);
   end

   if (local_var(LVAR_CheckedSelection) > 0) then
      NOption(165, Jake16, 4);
   else
      NOption(103, Jake02, 4);

   if fo1in2_weapon_upgrades_enabled then
      NOption(1999, NodeUpgrade, 4);

   NOption(147, Jake13, 4);
end

procedure Jake10 begin
   Reply(148);
   NLowOption(149, Barter);
   NLowOption(150, Jake13);
   NOption(151, Barter, 4);

   if (local_var(LVAR_Here_Before) < 2) then begin
      if looking_for_waterchip then begin
         NOption(104, Jake03, 4);
      end
      NOption(105, Jake04, 4);
   end

   if (local_var(LVAR_CheckedSelection) > 0) then
      NOption(165, Jake16, 4);
   else
      NOption(103, Jake02, 4);

   if fo1in2_weapon_upgrades_enabled then
      NOption(1999, NodeUpgrade, 4);

   NOption(152, Jake15, 4);
   NOption(153, Jake13, 4);
end

procedure Jake11 begin
   float_msg(self_obj, mstr(154), FLOAT_MSG_RED);
   call combat;
end

procedure Jake12 begin
   set_global_var(GVAR_VANCE_KNOWS_PLAYER, 1);
   Reply(155);
   NOption(156, Jake08, 4);
   NOption(157, Jake13, 4);
end

procedure Jake13 begin
end

procedure Jake14 begin
   BottomReact
end

procedure Jake15 begin
   BottomReact
   call combat;
end

procedure Jake16 begin
   mark_on_map(AREA_BROTHERHOOD)
   mark_on_map(AREA_BONEYARD)

   NMessage(166);
end

procedure JakeEnd begin
end

procedure Barter begin
   set_local_var(LVAR_CheckedSelection, 1);

   NMessage(158);
   gdialog_mod_barter(barter_mod_initial);
   Reply(159);
   NOption(160, JakeEnd, 4);
   NLowOption(161, JakeEnd);
end

procedure Get_Stuff begin
   get_barter_inven(Jake_Desk_Ptr);
end

procedure Put_Stuff begin
   put_barter_inven(Jake_Desk_Ptr);
end

// Upgrade weapons
procedure NodeUpgrade begin
variable has_pistol := false;
variable has_rifle := false;
variable has_other := false;

   if (dude_item_count(PID_DESERT_EAGLE) or dude_item_count(PID_44_MAGNUM_REVOLVER) or dude_item_count(PID_9MM_MAUSER)) then begin
      has_pistol := true;
   end
   if (dude_item_count(PID_HUNTING_RIFLE) or dude_item_count(PID_ASSAULT_RIFLE) or dude_item_count(PID_COMBAT_SHOTGUN)) then begin
      has_rifle := true;
   end
   if dude_item_count(PID_CATTLE_PROD) then begin
      has_other := true;
   end

   if ((has_pistol) or (has_rifle) or (has_other)) then begin
      Reply(2000);
      if (has_pistol) then
         NOption(2010, NodeUpgrade_Pistols, 4);
      if (has_rifle) then
         NOption(2020, NodeUpgrade_Rifles, 4);
      if (has_other) then
         NOption(2030, NodeUpgrade_Melee, 4);
   end
   else begin
      Reply(2001);
   end
   NOption(2040, Barter, 4);
   NOption(2050, JakeEnd, 4);
end

procedure NodeUpgrade_Done begin
   NMessage(2600);

   gfade_out(1);
   game_time_advance(ONE_GAME_HOUR * 2);
   gfade_in(1);

   Reply(2601);
   NOption(2110, NodeUpgrade, 4);
   NOption(g_bye, JakeEnd, 4);
end

procedure NodeUpgrade_Pistols begin
variable temp_msg := "";
variable afford := false;
   if (dude_item_count(PID_44_MAGNUM_REVOLVER)) then begin
      temp_msg += mstr(2200) + MCOST + mstr(2202) + " ";
   end
   if (dude_item_count(PID_DESERT_EAGLE)) then begin
      temp_msg += mstr(2201) + DECOST + mstr(2202);
   end
   if (dude_item_count(PID_9MM_MAUSER)) then begin
      temp_msg += mstr(2203) + MauserCOST + mstr(2202);
   end

   Reply(temp_msg);
   if ((dude_item_count(PID_44_MAGNUM_REVOLVER)) and (dude_caps >= MCOST)) then begin
      NOption(2210, NodeUpgrade_Revolver, 004);
      afford := true;
   end
   if ((dude_item_count(PID_DESERT_EAGLE)) and (dude_caps >= DECOST)) then begin
      NOption(2220, NodeUpgrade_DesertEagle, 004);
      afford := true;
   end
   if ((dude_item_count(PID_9MM_MAUSER)) and (dude_caps >= MauserCOST)) then begin
      NOption(2230, NodeUpgrade_Mauser, 004);
      afford := true;
   end
   if (afford == false) then begin
      NOption(2140, JakeEnd, 004);
   end
   NOption(2110, NodeUpgrade, 4);
   NOption(2040, Barter, 4);
   NOption(2130, JakeEnd, 4);
end

procedure NodeUpgrade_Rifles begin
variable temp_msg;
variable afford := false;
   temp_msg := "";
   if (dude_item_count(PID_HUNTING_RIFLE)) then begin
      temp_msg += mstr(2300) + HRCOST + mstr(2202) + " ";
   end
   if (dude_item_count(PID_ASSAULT_RIFLE)) then begin
      temp_msg += mstr(2301) + ARCOST + mstr(2202) + " ";
   end
   if (dude_item_count(PID_COMBAT_SHOTGUN)) then begin
      temp_msg += mstr(2303) + CSCOST + mstr(2202);
   end

   Reply(temp_msg);
   if ((dude_item_count(PID_HUNTING_RIFLE)) and (dude_caps >= HRCOST)) then begin
      NOption(2310, NodeUpgrade_HRifle, 004);
      afford := true;
   end
   if ((dude_item_count(PID_ASSAULT_RIFLE)) and (dude_caps >= ARCOST)) then begin
      NOption(2320, NodeUpgrade_ARifle, 004);
      afford := true;
   end
   if ((dude_item_count(PID_COMBAT_SHOTGUN)) and (dude_caps >= CSCOST)) then begin
      NOption(2340, NodeUpgrade_CombatShotgun, 004);
      afford := true;
   end
   if (afford == false) then begin
      NOption(2140, JakeEnd, 004);
   end
   NOption(2110, NodeUpgrade, 4);
   NOption(2040, Barter, 4);
   NOption(2130, JakeEnd, 4);
end

procedure NodeUpgrade_Melee begin
   Reply(mstr(2400) + CPCOST + mstr(2202));
   if (dude_caps >= CPCOST) then begin
      NOption(2410, NodeUpgrade_CattleProd, 004);
   end else begin
      NOption(2140, JakeEnd, 004);
   end
   NOption(2110, NodeUpgrade, 4);
   NOption(2040, Barter, 4);
   NOption(2130, JakeEnd, 4);
end

procedure NodeUpgrade_Revolver begin
   give_money(MCOST);
   call upgrade_weapon(PID_44_MAGNUM_REVOLVER, PID_44_MAGNUM_SPEEDLOADER);
   call NodeUpgrade_Done;
end
procedure NodeUpgrade_DesertEagle begin
   give_money(DECOST);
   call upgrade_weapon(PID_DESERT_EAGLE, PID_DESERT_EAGLE_EXT_MAG);
   call NodeUpgrade_Done;
end

procedure NodeUpgrade_HRifle begin
   give_money(HRCOST);
   call upgrade_weapon(PID_HUNTING_RIFLE, PID_SCOPED_HUNTING_RIFLE);
   call NodeUpgrade_Done;
end
procedure NodeUpgrade_ARifle begin
   give_money(ARCOST);
   call upgrade_weapon(PID_ASSAULT_RIFLE, PID_ASSAULT_RIFLE_EXT_MAG);
   call NodeUpgrade_Done;
end
procedure NodeUpgrade_CombatShotgun begin
   give_money(CSCOST);
   call upgrade_weapon(PID_COMBAT_SHOTGUN, PID_COMBAT_SHOTGUN_EXT_MAG);
   call NodeUpgrade_Done;
end

procedure NodeUpgrade_CattleProd begin
   give_money(CPCOST);
   call upgrade_weapon(PID_CATTLE_PROD, PID_SUPER_CATTLE_PROD);
   call NodeUpgrade_Done;
end

procedure NodeUpgrade_Mauser begin
   variable Item, countAmmo;

   // Set weapon ammo to 0 and add it to the player inventory
   Item := dude_item(PID_9MM_MAUSER);
   countAmmo := get_weapon_ammo_count(Item);
   if (countAmmo > 0) then begin
      set_weapon_ammo_count(Item, 0);

      Item := create_object(PID_9MM_BALL, 0, 0);
      set_weapon_ammo_count(Item, countAmmo);
      add_obj_to_inven(dude_obj, Item);
   end

   give_money(MauserCOST);
   call upgrade_weapon(PID_9MM_MAUSER, PID_10MM_MAUSER);
   call NodeUpgrade_Done;
end

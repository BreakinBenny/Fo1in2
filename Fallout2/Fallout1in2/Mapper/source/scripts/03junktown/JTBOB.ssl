/*

   Junktown - Bob
   TODO : This is cut content. Check if shit needs fixing. It probably does?

*/

/* Include Files */
#include "define.h"
//#include "area/necropolis.h"

#define NAME                    SCRIPT_JTBOB
#define TOWN_REP_VAR            (GVAR_TOWN_REP_JUNKTOWN)

#include "command.h"
#include "modreact.h"
#include "sfall/sfall.h"

/* Standard Script Procedures */
procedure start;
procedure talk_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;

procedure bob0;
procedure bob1;
procedure bob2;
procedure bob3;
procedure bob4;
procedure bob5;
procedure bob6;
procedure bob7;
procedure bob8;
procedure bob9;
procedure bob10;
procedure bob11;
procedure bob12;
procedure bob13;
procedure bob14;
procedure bob15;
procedure bob16;
procedure bobend;
procedure combat;

variable Herebefore;
variable Days;
variable Met_Casino;
variable Has_Weapon;

procedure start begin
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure map_enter_p_proc begin
   // TODO: wtf?
   /*if (((GAME_TIME_IN_DAYS) - Days) >= 7) then begin
      kill_critter(self_obj, ANIM_stand);
   end*/

   // Cut content, remove for now:
   destroy_object(self_obj);
end

procedure talk_p_proc begin
   dude_look_at_self;
   if (Has_Weapon == 0) and (dude_is_armed) then begin
      Has_Weapon := 1;
      start_dialog_at_node(bob0);
   end
   else begin
      if (Met_Casino) then begin
         call bob9;
      end
      else if (Herebefore) then begin
         start_dialog_at_node(bob13);
      end
      else begin
         Herebefore := 1;
         Days := GAME_TIME_IN_DAYS;
         start_dialog_at_node(bob10);
      end
   end
end

procedure bob0 begin
   Reply(101);
   NLowOption(102, bob1);
   NOption(103, bob2, 4);
   NOption(104, bob3, 4);
   NOption(105, bob3, 5);
end

procedure bob1 begin
   NMessage(106);
end

procedure bob2 begin
   NMessage(107);
end

procedure bob3 begin
   Reply(108);
   NOption(109, bob4, 4);
   NOption(110, bob5, 6);
end

#define get_active_hand(slot)    if (active_hand == 0) then slot := INVEN_TYPE_LEFT_HAND;    \
                                 else slot := INVEN_TYPE_RIGHT_HAND

procedure bob4 begin
   // TODO: Needs to fetch item name??
   // Also completely wrong: It checks if dude is armed for right_hand, if not it returns left_hand? As Trump would say: WRONG!
   // 2nd message must be rewritten to something unarmed-like. Then first check must be changed to check the active hand.
   // Then we have to return the item name and print it out.
   // I'm not going to do that now, though.
   if (dude_is_armed) then begin
      NMessage(mstr(111) + obj_pid(dude_right_hand) + mstr(112));
   end
   else begin
      NMessage(mstr(113) + obj_pid(dude_left_hand) + mstr(114));
   end
end

procedure bob5 begin
   Reply(115);
   NOption(116, bob6, 6);
   NOption(117, bob7, 6);
   NOption(118, bob8, 6);
   NOption(119, bobend, 6);
end

procedure bob6 begin
   Reply(120);
   NOption(121, bob7, 6);
   NOption(122, bob8, 6);
   NOption(123, bobend, 6);
end

procedure bob7 begin
   Reply(124);
   NOption(125, bob6, 6);
   NOption(126, bob8, 6);
   NOption(127, bobend, 6);
end

procedure bob8 begin
   Reply(128);
   NOption(129, bob6, 6);
   NOption(130, bob7, 6);
   NOption(131, bobend, 6);
end

procedure bob9 begin
   float_msg(self_obj, mstr(132), FLOAT_MSG_NORMAL);
end

procedure bob10 begin
   Reply(133);
   NLowOption(134, bob1);
   NOption(135, bob2, 4);
   NOption(136, bob11, 4);
   NOption(137, bob5, 5);
end

procedure bob11 begin
   Reply(138);
   NOption(139, bobend, 4);
   NOption(140, bob12, 6);
end

procedure bob12 begin
   Reply(141);
   NOption(142, bob6, 6);
   NOption(143, bob7, 6);
   NOption(144, bob8, 6);
   NOption(145, bobend, 6);
end

procedure bob13 begin
   Reply(146);
   NLowOption(147, bob1);
   NOption(148, bob14, 4);
   NOption(149, bob15, 4);
   NOption(150, bob16, 6);
end

procedure bob14 begin
   NMessage(151);
end

procedure bob15 begin
   NMessage(152);
end

procedure bob16 begin
   Reply(153);
   NOption(154, bob6, 6);
   NOption(155, bob7, 6);
   NOption(156, bob8, 6);
   NOption(157, bobend, 6);
end

procedure bobend begin
end

procedure combat begin
end

procedure damage_p_proc begin
   if source_is_dude then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
end

procedure destroy_p_proc begin
   if source_is_dude then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
   end
   inc_good_critter
end

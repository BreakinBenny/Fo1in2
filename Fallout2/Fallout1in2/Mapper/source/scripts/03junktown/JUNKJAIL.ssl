/*

   Junktown - Jail door

*/

/* Include Files */
#include "define.h"
#include "maps/junkent.h"

#define NAME                    SCRIPT_JUNKJAIL

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure damage_p_proc;
procedure description_p_proc;
procedure map_enter_p_proc;
procedure spatial_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure lockpicking;

variable skill_test;
variable triggered;

import variable jail_door_ptr;

procedure use_p_proc;

procedure start begin
end

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
      jail_door_ptr := 0;
      destroy_object(self_obj);
   end
   else
       display_msg(message_str(SCRIPT_DOOR, 193));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

procedure map_enter_p_proc begin
   if (self_tile == 18666) then begin
      obj_close(self_obj);
      obj_lock(self_obj);
      jail_door_ptr := self_obj;
   end
end

procedure spatial_p_proc begin
   if (source_is_dude and (triggered == 0) and (map_var(MVAR_dude_in_jail) == 1)) then begin
      display_msg(mstr(100));
      set_map_var(MVAR_dude_in_jail, 0);
      dec_general_rep(3);

      give_xp_msg(EXP_BUSTING_OUT_OF_JAIL, mstr(108));

      if not(REP_ENEMY_JUNKTOWN) then begin
         set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
         dec_general_rep(5);
         inc_junktown_rep(REP_BONUS_FLEEING_JAIL);
      end
      triggered := 1;
      destroy_object(self_obj);
   end
end

procedure use_obj_on_p_proc begin
   variable item := obj_pid(obj_being_used_with);
   if (item == PID_LOCKPICKS) then begin
      skill_test := roll_vs_skill(dude_obj, SKILL_LOCKPICK, -20);
      call lockpicking;
   end
   else if (item == PID_EXP_LOCKPICK_SET) then begin
      skill_test := roll_vs_skill(dude_obj, SKILL_LOCKPICK, -15);
      call lockpicking;
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_LOCKPICK) then begin
      skill_test := roll_vs_skill(source_obj, SKILL_LOCKPICK, 0);
      call lockpicking;
   end
end

procedure lockpicking begin
   script_overrides;
   set_map_var(MVAR_dude_picked_jail_door, map_var(MVAR_dude_picked_jail_door) + 1);
   if (is_success(skill_test)) then begin
      if (obj_is_locked(self_obj)) then begin
         obj_unlock(self_obj);
         if source_is_dude then
            display_msg(mstr(103));
         else
            display_msg(obj_name(source_obj) + mstr(200));
      end
      else begin
         obj_lock(self_obj);
         if source_is_dude then
            display_msg(mstr(104));
         else
            display_msg(obj_name(source_obj) + mstr(201));
      end
   end
   else begin
      if (obj_is_locked(self_obj)) then begin
         display_msg(mstr(105));
         if source_is_dude then
            display_msg(mstr(105));
         else
            display_msg(obj_name(source_obj) + mstr(202));
      end
      else begin
         if source_is_dude then
            display_msg(mstr(106));
         else
            display_msg(obj_name(source_obj) + mstr(202));
      end
   end
end

procedure use_p_proc begin
   if (obj_is_locked(self_obj)) then begin
      script_overrides;
      display_msg(mstr(102));
   end
end

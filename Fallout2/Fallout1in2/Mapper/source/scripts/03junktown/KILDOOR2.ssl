/*

   Junktown - Killians door (inside)

*/

/* Include Files */
#include "define.h"
#include "maps/junkkill.h"

#define NAME                    SCRIPT_KILDOOR1

#include "command.h"

/* Standard Script Procedures */
procedure start;
procedure spatial_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure description_p_proc;

procedure open_door;

#define LVAR_Locked                     (0)

#define EVENT_TRESPASS     (1)

variable test;
variable bonus;

import variable Killian_ptr;

procedure start begin
end

procedure spatial_p_proc begin
   /*if source_is_dude then begin
      add_timer_event(Killian_ptr, 0, EVENT_TRESPASS);
   end*/
end

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      set_global_var(GVAR_ENEMY_JUNKTOWN, 1);
      destroy_object(self_obj);
   end
   else begin
      display_msg(message_str(SCRIPT_DOOR, 193));
   end
end

procedure map_enter_p_proc begin
   if not(junktown_invaded) and is_killian_alive then begin
      obj_close(self_obj);
      if ((game_time_hour >= 1910) or (game_time_hour < 650)) then begin
         obj_lock(self_obj);
      end
      else begin
         obj_unlock(self_obj);
      end
      set_local_var(LVAR_Locked, 0);
   end
   else begin
      obj_unlock(self_obj);
      obj_close(self_obj);
   end
end

procedure map_update_p_proc begin
   if not(junktown_invaded) and is_killian_alive then begin
      obj_close(self_obj);
      if ((game_time_hour >= 1910) or (game_time_hour < 650) and (local_var(LVAR_Locked) == 0)) then begin
         obj_lock(self_obj);
      end
      else begin
         obj_unlock(self_obj);
      end
   end
end

procedure use_p_proc begin
   if (obj_is_locked(self_obj)) then begin
      script_overrides;
      display_msg(message_str(SCRIPT_KILDOOR1, 100));
   end
   else if not(junktown_invaded) and is_killian_alive then begin
      if (Killian_ptr != 0) then begin
         if (day and (obj_can_see_obj(Killian_ptr, dude_obj) or obj_can_hear_obj(Killian_ptr, dude_obj))) then begin
            script_overrides;
         end
      end
   end
   if (Killian_ptr != 0) then begin
      add_timer_event(Killian_ptr, 0, EVENT_TRESPASS);
   end
end

procedure use_obj_on_p_proc begin
   variable item := obj_pid(obj_being_used_with);

   if (item == PID_LOCKPICKS or item == PID_EXP_LOCKPICK_SET) then begin
      script_overrides;

      bonus := 0;
      call open_door;
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_LOCKPICK) then begin
      script_overrides;

      bonus := -20;
      call open_door;
   end
end

procedure description_p_proc begin
   if (local_var(LVAR_Locked) == 0) then begin
      display_msg(message_str(SCRIPT_DOOR, 104)); // Door is locked
   end
end

procedure open_door begin
   if (Killian_ptr != 0) then begin
      if (obj_can_see_obj(Killian_ptr, dude_obj) or obj_can_hear_obj(Killian_ptr, dude_obj)) then begin
         add_timer_event(Killian_ptr, 0, EVENT_TRESPASS);
         return;
      end
   end

   if not(day) then begin
      if (not(obj_is_locked(self_obj))) then begin
         display_msg(mstr(104));
      end
      else begin
         test := roll_vs_skill(source_obj, SKILL_LOCKPICK, bonus);
         if (is_success(test)) then begin
            if source_is_dude then
               display_msg(mstr(101));
            else
               display_msg(obj_name(source_obj) + mstr(200));
            obj_unlock(self_obj);
            set_local_var(LVAR_Locked, 1);
         end
         else if (is_critical(test)) then begin
            if source_is_dude then
               display_msg(mstr(103));
            else
               display_msg(mstr(202) + obj_name(source_obj) + mstr(203));
            jam_lock(self_obj);
         end
         else begin
            if source_is_dude then
               display_msg(mstr(102));
            else
               display_msg(obj_name(source_obj) + mstr(201));
         end
      end
   end
   else if not(obj_is_locked(self_obj)) then begin
      display_msg(mstr(104));
   end
end

/*

   Mariposa - Vats Control Room door. Unused.

*/

/* Include Files */
#include "define.h"

#define NAME                    SCRIPT_VCONDOOR

#include "command.h"

procedure start;
procedure description_p_proc;
procedure map_enter_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;

variable test;

procedure start begin
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure map_enter_p_proc begin
   obj_lock(self_obj);
end

procedure use_p_proc begin
   if (obj_is_locked(self_obj)) then begin
      script_overrides;
      display_msg(mstr(101));
   end
end

procedure use_obj_on_p_proc begin
   variable Item := 0;
   test := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 0);

   if (obj_pid(Item) == PID_ELECTRONIC_LOCKPICKS or obj_pid(Item) == PID_ELEC_LOCKPICK_MKII) then begin
      script_overrides;

      if (obj_pid(Item) == PID_ELEC_LOCKPICK_MKII) then
         test := roll_vs_skill(dude_obj, SKILL_LOCKPICK, 10);

      if (not(obj_is_locked(self_obj))) then begin
         display_msg(mstr(104));
      end
      else begin
         if (is_success(test)) then begin
            display_msg(mstr(102));
            obj_unlock(self_obj);
         end
         else begin
            if (is_critical(test)) then begin
               display_msg(mstr(103));
               jam_lock(self_obj);
            end
            else begin
               display_msg(mstr(106));
            end
         end
      end
   end
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_LOCKPICK) then begin
      script_overrides;
      if (not(obj_is_locked(self_obj))) then begin
         display_msg(mstr(104));
      end
      else begin
         test := roll_vs_skill(source_obj, action_being_used, -20);
         if (is_success(test)) then begin
            display_msg(mstr(102));
            obj_unlock(self_obj);
         end
         else begin
            if (is_critical(test)) then begin
               display_msg(mstr(103));
               jam_lock(self_obj);
            end
            else begin
               display_msg(mstr(105));
            end
         end
      end
   end
end

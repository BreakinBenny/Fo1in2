/*

   Military Base - Command / force Field control terminal

*/

#include "define.h"
#include "area/mbase.h"
#include "maps/mbstrg12.h"

#define NAME                    SCRIPT_COMMAND

#include "command.h"

procedure start;
procedure description_p_proc;
procedure use_p_proc;
procedure use_obj_on_p_proc;
procedure use_skill_on_p_proc;
procedure Command01;
procedure use_all_fields_on;
procedure use_all_fields_off;

#define LVAR_BaseAlert        (0)
#define LVAR_HackedTerminal   (1)
#define LVAR_ToggleFields     (2)

variable skill_roll;
variable stat_roll;
variable initial := 0;

import variable field_change;

procedure map_update_p_proc;
procedure map_enter_p_proc;

procedure start begin
   if not(initial) then begin
      if (global_var(GVAR_VATS_ALERT)) then begin
         set_local_var(LVAR_BaseAlert, 1);
      end
      initial := 1;
   end
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
   display_msg(mstr(101));
   if (local_var(LVAR_BaseAlert) and not(local_var(LVAR_ToggleFields))) then begin
      call Command01;
   end
end

procedure use_p_proc begin
   variable LVar0 := 0;
   if (local_var(LVAR_BaseAlert) and not(local_var(LVAR_HackedTerminal))) then begin
      LVar0 := roll_vs_skill(dude_obj, SKILL_GAMBLING, 0);
      if (is_success(LVar0)) then begin
         display_msg(mstr(109));
         set_local_var(LVAR_HackedTerminal, 1);
         give_xp_msg(EXP_BONUS_HACKING, mstr(116));
      end
      else begin
         display_msg(mstr(110));
      end
      game_time_advance(game_ticks(1200));
      script_overrides;
   end
end

procedure use_obj_on_p_proc begin
   if (obj_pid(obj_being_used_with) == PID_RADIO) then begin
      if (not(global_var(GVAR_FIELD_COMPUTER_MODIFIED))) then begin
         if (dude_skill_success(SKILL_REPAIR, 0)) then begin
            script_overrides;
            display_msg(mstr(117));
            set_global_var(GVAR_FIELD_COMPUTER_MODIFIED, 1);
         end
         else begin
            display_msg(mstr(118));
         end
         game_time_advance(game_ticks(600));
         script_overrides;
      end
   end
end

procedure use_skill_on_p_proc begin
   variable skill_roll := 0;
   if (action_being_used == SKILL_SCIENCE) then begin
      skill_roll := roll_vs_skill(dude_obj, action_being_used, 0);
      if (not(local_var(LVAR_BaseAlert))) then begin
         if (is_success(skill_roll)) then begin
            display_msg(mstr(102));
            field_change := "on";
            call use_all_fields_on;
            set_local_var(LVAR_BaseAlert, 1);
         end
         else begin
            display_msg(mstr(103));
         end
         game_time_advance(game_ticks(300));
      end
      else if (not(local_var(LVAR_HackedTerminal))) then begin
         if (is_success(skill_roll)) then begin
            display_msg(mstr(104));
         end
         else begin
            display_msg(mstr(105));
         end
         game_time_advance(game_ticks(300));
         call Command01;
      end
      else if (not(local_var(LVAR_ToggleFields))) then begin
         if (is_success(skill_roll)) then begin
            display_msg(mstr(106));
            field_change := "off";
            call use_all_fields_off;
         end
         else begin
            display_msg(mstr(108));
         end
         game_time_advance(game_ticks(1800));
         set_local_var(LVAR_ToggleFields, 1);
      end
      script_overrides;
   end
end

procedure Command01 begin
   stat_roll := do_check(dude_obj, STAT_pe, dude_perk(PERK_bonus_awareness));
   if (not(local_var(LVAR_HackedTerminal))) then begin
      if (is_success(stat_roll)) then begin
         if (is_critical(stat_roll)) then begin
            display_msg(mstr(111));
         end
         else begin
            display_msg(mstr(112));
         end
      end
      else if (is_critical(stat_roll)) then begin
         display_msg(mstr(113));
      end
      else begin
         display_msg(mstr(114));
      end
   end
   else begin
      display_msg(mstr(115));
   end
end

procedure use_all_fields_on begin
   set_force_fields_on;
end

procedure use_all_fields_off begin
   set_force_fields_off;
end

procedure map_update_p_proc begin
   // Since rewriting FIELD1A.ssl, this code is unnecessary.
   /*if get_force_fields_off then begin
      field_change := "off";
      call use_all_fields_off;
   end*/
end

procedure map_enter_p_proc begin
   // We are keeping this here to do an initial-refresh of all force fields.
   if get_force_fields_off then begin
      field_change := "off";
      call use_all_fields_off;
   end
end

/*

   Brotherhood - Student

   NOTE:
      MVAR_STUDENT_PTR is used to remember Student_ptr on map load. Otherwise the fight scene will break.

*/

/* Include Files */
#include "define.h"
#include "area/brotherhood.h"
#include "maps/brohd12.h"

#define NAME                    SCRIPT_STUDENT
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BOS)

#include "command.h"
#include "modreact.h"

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;
procedure destroy_p_proc;
procedure critter_p_proc;
procedure talk_p_proc;

procedure Student00;

#define LVAR_Home_Tile     (3)

import variable Student_ptr;

variable tmp_hostile := 0;
variable initial := 0;
variable my_knife;
variable home_face := 2;
variable temp;
variable counter := 0;

procedure start begin
   if not(initial) then begin
      if (local_var(LVAR_Home_Tile) == 0) then begin
         set_local_var(LVAR_Home_Tile, self_tile);
      end

      set_self_team(TEAM_BROTHERHOOD);
      set_self_ai(AI_BROTHERHOOD_INITIATE);

      my_knife := self_item(PID_KNIFE);
      if (local_var(0) != 0) then begin
         if (map_var(MVAR_I_AM_ACTIVE) == local_var(0)) then begin
            Student_ptr := self_obj;
            set_map_var(MVAR_STUDENT_PTR, self_obj);
            set_map_var(MVAR_STUDENT_READY, 1);
         end
      end
      else begin
         temp := map_var(MVAR_STUDENT_NUM) + 1;
         set_map_var(MVAR_STUDENT_NUM, temp);
         set_local_var(0, temp);
         Student_ptr := self_obj;
         set_map_var(MVAR_STUDENT_PTR, self_obj);
         set_map_var(MVAR_STUDENT_READY, 1);
      end
      initial := 1;
   end
end

procedure map_enter_p_proc begin
   check_bos_ca_enabled
end

procedure destroy_p_proc begin
   set_global_var(GVAR_ENEMY_BROTHERHOOD, 1);
   inc_good_critter
end

procedure critter_p_proc begin
   if REP_ENEMY_BOS then begin
      tmp_hostile := 1;
   end

   if (tile_distance_objs(self_obj, dude_obj) > 12) then begin
      tmp_hostile := 0;
   end

   if (tmp_hostile) then begin
      set_global_var(GVAR_ENEMY_BROTHERHOOD, 1);
      tmp_hostile := 0;
      attack(dude_obj);
   end
   else if (global_var(GVAR_ENEMY_BROTHERHOOD) == 0) then begin
      if (local_var(1) == 1) then begin
         if (self_tile != map_var(MVAR_STUDENT_HEX)) then begin
            self_walk_to_tile(map_var(MVAR_STUDENT_HEX));
         end
         else begin
            set_local_var(1, 0);
            set_map_var(MVAR_STUDENT_READY, 1);
            self_rotate(1);
         end
      end
      else if (local_var(2) == 1) then begin
         if (self_tile != local_var(LVAR_Home_Tile)) then begin
            self_walk_to_tile(local_var(LVAR_Home_Tile));
         end
         else begin
            set_local_var(2, 0);
            self_rotate(home_face);
         end
      end
      else if (map_var(MVAR_SIGNAL_NEW_STUDENT) == local_var(0)) then begin
         set_map_var(MVAR_SIGNAL_NEW_STUDENT, 0);
         Student_ptr := self_obj;
         set_map_var(MVAR_STUDENT_PTR, self_obj);
         set_map_var(MVAR_SIGNAL_OLD_STUDENT, map_var(MVAR_I_AM_ACTIVE));
         set_map_var(MVAR_I_AM_ACTIVE, local_var(0));
         set_local_var(1, 1);
      end
      else if (map_var(MVAR_SIGNAL_OLD_STUDENT) == local_var(0)) then begin
         set_map_var(MVAR_SIGNAL_OLD_STUDENT, 0);
         set_local_var(2, 1);
      end
   end
end

procedure talk_p_proc begin
   dude_look_at_self;
   counter := counter + 1;
   call Student00;
end

procedure Student00 begin
   if counter < 4 then begin
      variable Msg;
      Msg := random(100, 103);
      if Msg == 101 then begin
         float_msg(self_obj, mstr(100), FLOAT_MSG_GREEN);
      end
      else begin
         float_msg(self_obj, mstr(100), FLOAT_MSG_RED);
      end
   end
   else begin
      display_msg(mstr(random(104, 106)));
   end
end

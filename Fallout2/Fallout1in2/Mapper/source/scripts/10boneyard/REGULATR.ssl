/*

   Boneyard - Regulator

*/

/* Include Files */
#include "define.h"
#include "maps/laadytum.h"
#include "area/boneyard.h"

#define NAME                    SCRIPT_REGULATR
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BONEYARD)

#include "command.h"
#include "modreact.h"
#include "sfall/sfall.h"

#define MAX_TRAVEL              (25)

/* Standard Script Procedures */
procedure start;
procedure map_enter_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure pickup_p_proc;
procedure timed_event_p_proc;

#define LVAR_Home_Tile        (5)
#define LVAR_Home_Rotation    (6)

variable Only_Once := 1;
variable PsstTime;
variable tmp_hostile;

variable critArray;
variable attack_target;
variable obj;

procedure Start begin
   if Only_Once then begin
      Only_Once := 0;
      set_self_team(TEAM_LA_REGULATORS);
      set_self_ai(AI_REGULATORS);
      add_timer_event(self_obj, game_ticks(random(1, 3)), 1);
      if (local_var(4) == 0) then begin
         inc_map_var(MVAR_RegulatorCount);
         set_local_var(4, 1);
      end
   end
end

procedure map_enter_p_proc begin
   if map_first_run then begin
      self_caps_adjust(random(1, 10));

      set_local_var(LVAR_Home_Tile, self_tile);
      set_local_var(LVAR_Home_Rotation, self_cur_rot);
   end
   //else if is_loading_game == false then begin
      //critter_attempt_placement(self_obj, local_var(LVAR_Home_Tile), self_elevation);
      //self_rotate(local_var(LVAR_Home_Rotation));
   //end
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure talk_p_proc begin
   dude_look_at_self;
   if (REP_ENEMY_LA_ADYTUM or REP_ENEMY_LA_REGULATORS) then
      float_msg(self_obj, message_str(SCRIPT_ENEMY, random(100, 105)), FLOAT_MSG_RED);
   else
      float_msg(self_obj, mstr(random(134, 138)), FLOAT_MSG_NORMAL);
end

procedure critter_p_proc begin
   variable LVar0 := 0;
   if (self_can_see_dude) then begin
      if (REP_ENEMY_LA_ADYTUM or REP_ENEMY_LA_REGULATORS) then begin
         attack(dude_obj);
      end
   end
   else if (attack_target != 0) then begin
      attack(attack_target);
   end

   LVar0 := global_var(GVAR_REGULATR_SOMETHING_0);
   if ((((game_time / 10) - LVar0) >= 5) and (tile_distance_objs(self_obj, dude_obj) <= 4) and not(REP_ENEMY_LA_ADYTUM) and not(REP_ENEMY_LA_REGULATORS)) then begin
      float_msg(self_obj, mstr(random(134, 138)), FLOAT_MSG_NORMAL);
      LVar0 := game_time / 10;
      set_global_var(GVAR_REGULATR_SOMETHING_0, LVar0);
   end
end

procedure damage_p_proc begin
   if source_is_dude then begin
      set_global_var(GVAR_DUDE_ENEMY_REGULATORS, 1);
   end
end

procedure destroy_p_proc begin
   dec_map_var(MVAR_RegulatorCount);
   if source_is_dude then begin
      inc_evil_critter
      set_global_var(GVAR_DUDE_ENEMY_REGULATORS, 1);
   end
   if (map_var(MVAR_RegulatorCount) == 0) then begin
      terminate_combat;
   end
end

procedure pickup_p_proc begin
   set_global_var(GVAR_DUDE_ENEMY_REGULATORS, 1);
end

procedure timed_event_p_proc begin
   if not(combat_is_initialized) then begin
      if (tile_distance(self_tile, local_var(LVAR_Home_Tile)) < MAX_TRAVEL) then
         self_walk_to_tile(tile_num_in_direction(self_tile, random(0, 5), random(1, 5)));
      else
         self_walk_to_tile(tile_num_in_direction(local_var(LVAR_Home_Tile), random(0, 5), random(1, 5)));
   end

   add_timer_event(self_obj, game_ticks(random(1, 3)), 1);

   // If Regulators and Adytum folks are hostile, re-initiate combat if the player manages to get out of it
   if not(combat_is_initialized) and get_blades_attacking and REP_ENEMY_LA_REGULATORS then begin
      critArray := list_as_array(LIST_CRITTERS);
      foreach (obj in critArray) begin
         if (get_team(obj) == TEAM_PLAYER) then begin
            if obj_can_see_obj(self_obj, obj) then begin
               attack_target := obj;
               break;
            end
         end
      end
   end
end
